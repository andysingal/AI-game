import bpy
import random

# Clear existing objects
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.object.select_by_type(type='MESH')
bpy.ops.object.delete()

# Create the platform
platform_width = 6.0  # Width in meters
platform_length = 80.0  # Length in meters
platform_height = 2.0  # Height in meters
gap = 1.0  # Gap between boxes in meters

# Create a mesh object for the platform
bpy.ops.mesh.primitive_cube_add(size=1)
platform = bpy.context.object
platform.scale = (platform_width, platform_length, platform_height)
platform.location = (0.0, platform_length / 2, platform_height / 2.0)

# Create a mesh object for the boxes
bpy.ops.mesh.primitive_cube_add(size=1)
box_mesh = bpy.context.object.data
box_mesh.name = "box"

# Calculate the number of boxes needed
num_boxes = int((platform_length - 2 * gap) / (1.0 + gap))

# Loop to create and position the boxes on the left side of the platform
for i in range(num_boxes):
    # Create a new object for the box
    box = bpy.data.objects.new("Box", box_mesh)
    bpy.context.collection.objects.link(box)

    # Position the box on the left side of the platform with a gap
    y_offset = (i + 1) * (1.0 + gap)
    box.location = (-platform_width / 2.0, y_offset, platform_height + 0.5)

# Loop to create and position the boxes on the right side of the platform
for i in range(num_boxes):
    # Create a new object for the box
    box = bpy.data.objects.new("Box", box_mesh)
    bpy.context.collection.objects.link(box)

    # Position the box on the right side of the platform with a gap
    y_offset = (i + 1) * (1.0 + gap)
    box.location = (platform_width / 2.0, y_offset, platform_height + 0.5)

# Add flying blocks on top of the platform
num_flying_blocks = 20  # Number of flying blocks to create
block_size = 1.0  # Size of the flying blocks

# Create a mesh object for the flying block
bpy.ops.mesh.primitive_cube_add(size=block_size)
block_mesh = bpy.context.object.data
block_mesh.name = "block"

# Keep track of the occupied positions to avoid intersections
occupied_positions = set()

for _ in range(num_flying_blocks):
    # Create a new object for the flying block
    block = bpy.data.objects.new("Block", block_mesh)
    bpy.context.collection.objects.link(block)

    # Randomly position the flying block on the platform
    x_offset = random.randint(-int(platform_width / 2.0), int(platform_width / 2.0))
    y_offset = random.uniform(0, platform_length)
    z_offset = random.uniform(3, 4)

    # Check for intersections with existing objects
    while (x_offset, y_offset, z_offset) in occupied_positions:
        x_offset = random.randint(-int(platform_width / 2.0), int(platform_width / 2.0))
        y_offset = random.uniform(0, platform_length)
        z_offset = random.uniform(3, 4)

    block.location = (x_offset, y_offset, z_offset)
    occupied_positions.add((x_offset, y_offset, z_offset))

# Select and focus on the platform
bpy.ops.object.select_all(action='DESELECT')
platform.select_set(True)
bpy.context.view_layer.objects.active = platform
bpy.ops.view3d.view_selected()
